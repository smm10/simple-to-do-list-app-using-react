{"version":3,"sources":["Button.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","console","log","onClick","_handleDelete","id","React","Component","App","handleSubmit","e","preventDefault","setState","prev","items","concat","state","text","handleChange","target","value","handleDelete","index","itemsClone","splice","className","type","onChange","this","map","item","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uPAwBeA,E,kDAjBb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDA,MAAQA,EAEbC,QAAQC,IAAI,EAAKF,OAJD,E,qDAUX,IAAD,OACJ,OAAO,4BAAQG,QAAS,WAAK,EAAKH,MAAMI,cAAc,EAAKJ,MAAMK,MAA1D,S,GAbUC,IAAMC,WC+EZC,G,wDA3Eb,aAAc,IAAD,8BACX,gBASFC,aAAe,SAACC,GACdA,EAAEC,iBACF,EAAKC,UAAS,SAAAC,GAAI,MAAK,CACrBC,MAAOD,EAAKC,MAAMC,OAAO,EAAKC,MAAMC,UAKtChB,QAAQC,IAAI,eAAe,EAAKc,MAAMF,OACtCb,QAAQC,IAAI,EAAKY,QAnBN,EAsBbI,aAAe,SAACR,GAEd,EAAKE,SAAS,CAACK,KAAKP,EAAES,OAAOC,QAC7BnB,QAAQC,IAAI,EAAKc,MAAMC,OAzBZ,EA6BbI,aAAe,SAACC,GAEd,IAAIC,EAAU,YAAO,EAAKP,MAAMF,OAChCS,EAAWC,OAAOF,EAAM,GAOxBrB,QAAQC,IAAIoB,GACZrB,QAAQC,IAAIqB,GAEZ,EAAKX,UAAS,SAAAC,GAAI,MAAK,CACrBC,MAAOS,OAxCT,EAAKP,MAAQ,CACXC,KAAK,GACLH,MAAM,IALG,E,qDAoDJ,IAAD,OACN,OACE,yBAAKW,UAAU,QACf,4DAAqC,2BAAOC,KAAK,OAAOC,SAAUC,KAAKV,eACvE,4BAAQf,QAASyB,KAAKnB,cAAtB,UACA,6BACA,sCACA,4BAEEmB,KAAKZ,MAAMF,MAAMe,KAAI,SAACC,EAAKR,GAC3B,OAAO,wBAAIS,IAAKT,GAASA,EAAM,EAAG,IAAKQ,EAAK,kBAAC,EAAD,CAAQzB,GAAIiB,EAAOlB,cAAe,EAAKiB,cAAvC,e,GAhElCf,IAAMC,YCKJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,a","file":"static/js/main.731ca812.chunk.js","sourcesContent":["import React from 'react';\n\n\n\n\nclass Button extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.props = props;\n\n    console.log(this.props);\n\n  }\n\n  \n\nrender(){\n    return <button onClick={()=>{this.props._handleDelete(this.props.id)}}>x</button>\n}\n\n\n}\n\nexport default Button;","import React from 'react';\n\nimport Button from './Button';\n\n\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n\n    this.state = {\n      text:\"\",\n      items:[]\n    }\n    \n  }\n\n  handleSubmit = (e)=>{\n    e.preventDefault();\n    this.setState(prev => ({\n      items: prev.items.concat(this.state.text)\n      \n  }));\n\n\n    console.log(\"Items array:\"+this.state.items);\n    console.log(this.items);\n  }\n\n  handleChange = (e)=>{\n\n    this.setState({text:e.target.value});\n    console.log(this.state.text);\n\n  }\n\n  handleDelete = (index)=>{\n    \n    let itemsClone = [...this.state.items];\n    itemsClone.splice(index,1);\n\n\n\n\n    //console.log(\"delete clicked\");\n    //console.log(this.state.items);\n    console.log(index);\n    console.log(itemsClone);\n\n    this.setState(prev => ({\n      items: itemsClone\n      \n  }));\n\n  }\n\n \n\n\n  render(){\n    return(\n      <div className=\"main\">\n      <h3>Enter your to-do-items here:</h3><input type=\"text\" onChange={this.handleChange}></input>\n      <button onClick={this.handleSubmit}>Submit</button>\n      <br/>\n      <h3>Items:</h3>\n      <ul>\n      {\n        this.state.items.map((item,index)=>{\n        return <li key={index}>{(index+1)+\".\"}{item}<Button id={index} _handleDelete={this.handleDelete}>x</Button></li>\n          \n        })\n      }\n\n      </ul>\n    </div>\n    );\n\n  }\n  }\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}